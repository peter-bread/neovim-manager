#!/usr/bin/env bash
# This script was generated by bashly 1.2.12 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
neovim_manager_usage() {
  printf "neovim-manager - Switch between stable and nightly Neovim releases easily\n\n"

  printf "%s\n" "Usage:"
  printf "  neovim-manager COMMAND\n"
  printf "  neovim-manager [COMMAND] --help | -h\n"
  printf "  neovim-manager --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Set up PATH. Should be run in shell rc file\n" "init     "
  printf "  %s   Install a Neovim build\n" "install  "
  printf "  %s   Use a Neovim build\n" "use      "
  printf "  %s   Uninstall a Neovim build\n" "uninstall"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
neovim_manager_init_usage() {
  printf "neovim-manager init - Set up PATH. Should be run in shell rc file\n\n"

  printf "%s\n" "Usage:"
  printf "  neovim-manager init\n"
  printf "  neovim-manager init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  eval \"\$(neovim-manager init)\"\n"
    echo

  fi
}

# :command.usage
neovim_manager_install_usage() {
  printf "neovim-manager install - Install a Neovim build\n\n"
  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  neovim-manager install [BUILD]\n"
  printf "  neovim-manager install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "BUILD"
    printf "\n"
    printf "    %s\n" "Allowed: stable, nightly"
    printf "    %s\n" "Default: stable"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  neovim-manager i\n"
    printf "  neovim manager install nightly\n"
    echo

  fi
}

# :command.usage
neovim_manager_use_usage() {
  printf "neovim-manager use - Use a Neovim build\n\n"
  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  neovim-manager use BUILD\n"
  printf "  neovim-manager use --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "BUILD"
    printf "\n"
    printf "    %s\n" "Allowed: stable, nightly"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  neovim-manager use stable\n"
    echo

  fi
}

# :command.usage
neovim_manager_uninstall_usage() {
  printf "neovim-manager uninstall - Uninstall a Neovim build\n\n"
  printf "Alias: rm, remove\n"
  echo

  printf "%s\n" "Usage:"
  printf "  neovim-manager uninstall BUILD\n"
  printf "  neovim-manager uninstall --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "BUILD"
    printf "\n"
    printf "    %s\n" "Allowed: stable, nightly"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  neovim-manager uninstall stable\n"
    printf "  neovim manager rm nightly\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/get_os.sh

# usage: os="$(get_os)"
function get_os() {
  case "$(uname -s)" in
    *Linux*)
      echo "linux"
      return 0
      ;;
    *Darwin*)
      echo "macos"
      return 0
      ;;
    *)
      echo "unknown or not supported" >&2
      return 1
      ;;
  esac
}

# src/lib/sample_function.sh

# usage: arch="$(get_arch)"
function get_arch() {
  local temp
  temp=$(uname -m)

  case "$temp" in
    x86_64 | arm64)
      echo "$temp"
      return 0
      ;;
    *)
      echo "unknown or not supported" >&2
      return 1
      ;;
  esac
}

# :command.command_functions
# :command.function
neovim_manager_init_command() {

  # src/init_command.sh

  if ! [[ ":$PATH:" == *":${XDG_DATA_HOME:-$HOME/.local/share}/neovim-manager/builds/active/bin:"* ]]; then
    echo 'export PATH="${XDG_DATA_HOME:-$HOME/.local/share}/neovim-manager/builds/active/bin:$PATH"'
  fi

}

# :command.function
neovim_manager_install_command() {

  # src/install_command.sh

  # system info
  os="$(get_os)"
  arch="$(get_arch)"

  # URL to fetch tarballs
  github_url="https://github.com/neovim/neovim/releases/download"

  build=${args[build]}
  format="tar.gz"
  name="nvim-$os-$arch"
  archive="$name.$format"
  location="$share/nvim-$build"

  cd "$HOME"

  wget --quiet "$github_url/$build/$archive"

  tar xzvf "$archive" &>/dev/null

  mkdir -p "$share"

  [[ -d "$location" ]] && rm -r "$location"

  mv "$name" "$location"

  rm "$archive"

}

# :command.function
neovim_manager_use_command() {

  # src/use_command.sh

  build=${args[build]}
  location="$share/nvim-$build"

  if [[ ! -d "$location" ]]; then
    echo "Error: nvim-$build is not installed"
    # TODO: prompt for install
    return 1
  fi

  ln -sfn "$location" "$active"

}

# :command.function
neovim_manager_uninstall_command() {

  # src/uninstall_command.sh

  build=${args[build]}
  location="$share/nvim-$build"

  if [[ -d "$location" ]]; then
    echo "Uninstalling nvim-$build"
    rm -r "$location"

    # assumes $active is a valid symlink
    # TODO: verify that it actually exists
    if [[ "$(readlink -f "$active")" == "$location" ]]; then
      echo "Unsetting active"
      rm "$active"
    fi

    return 0

  else
    echo "nvim-$build not installed."
    return 1
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        neovim_manager_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      neovim_manager_init_parse_requirements "$@"
      shift $#
      ;;

    install | i)
      action="install"
      shift
      neovim_manager_install_parse_requirements "$@"
      shift $#
      ;;

    use | u)
      action="use"
      shift
      neovim_manager_use_parse_requirements "$@"
      shift $#
      ;;

    uninstall | rm | remove)
      action="uninstall"
      shift
      neovim_manager_uninstall_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      neovim_manager_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
neovim_manager_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        neovim_manager_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
neovim_manager_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        neovim_manager_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v tar >/dev/null 2>&1; then
    printf "missing dependency: tar\n" >&2
    missing_deps=1
  else
    deps['tar']="$(command -v tar | head -n1)"
  fi

  # :dependency.filter
  if ! command -v wget >/dev/null 2>&1; then
    printf "missing dependency: wget\n" >&2
    missing_deps=1
  else
    deps['wget']="$(command -v wget | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['build']+x} ]]; then
          args['build']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['build']:-} ]] || args['build']="stable"

  # :command.whitelist_filter
  if [[ -n ${args['build']:-} ]] && [[ ! ${args['build']:-} =~ ^(stable|nightly)$ ]]; then
    printf "%s\n" "build must be one of: stable, nightly" >&2
    exit 1
  fi

}

# :command.parse_requirements
neovim_manager_use_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        neovim_manager_use_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="use"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['build']+x} ]]; then
          args['build']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['build']+x} ]]; then
    printf "missing required argument: BUILD\nusage: neovim-manager use BUILD\n" >&2

    exit 1
  fi

  # :command.whitelist_filter
  if [[ -n ${args['build']:-} ]] && [[ ! ${args['build']:-} =~ ^(stable|nightly)$ ]]; then
    printf "%s\n" "build must be one of: stable, nightly" >&2
    exit 1
  fi

}

# :command.parse_requirements
neovim_manager_uninstall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        neovim_manager_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="uninstall"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['build']+x} ]]; then
          args['build']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['build']+x} ]]; then
    printf "missing required argument: BUILD\nusage: neovim-manager uninstall BUILD\n" >&2

    exit 1
  fi

  # :command.whitelist_filter
  if [[ -n ${args['build']:-} ]] && [[ ! ${args['build']:-} =~ ^(stable|nightly)$ ]]; then
    printf "%s\n" "build must be one of: stable, nightly" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -e

  # src/initialize.sh
  # tarballs extracted here
  share="${XDG_DATA_HOME:-$HOME/.local/share}/neovim-manager/builds"

  # symlink to active version
  active="$share/active"

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") neovim_manager_init_command ;;
    "install") neovim_manager_install_command ;;
    "use") neovim_manager_use_command ;;
    "uninstall") neovim_manager_uninstall_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
